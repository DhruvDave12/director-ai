# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

## Agent Creation Process (agent-server/)

### Understanding Agent Registration System
The agent-server uses a factory pattern with registry for managing agents:

1. **Base Agent Structure**: All agents extend `BaseAgent` class from `src/types/agent.ts`
2. **Agent Factory**: Registry system in `src/core/agent-factory.ts` manages agent creation
3. **Registration**: Agents are registered in `src/index.ts` in `initializeAgents()` function

### Agent Creation Steps

#### Step 1: Create Agent Class
Create new agent in `src/agents/main/[agent-name].ts`:
```typescript
import type { AgentConfig, AgentRequest, AgentResponse, AgentExecutionContext } from "../../types/agent.js";
import { BaseAgent } from "../../types/agent.js";

export class YourAgentClass extends BaseAgent {
  constructor() {
    const config: AgentConfig = {
      id: "your_agent_id", // Must be unique
      name: "Your Agent Name",
      description: "Agent description",
      version: "1.0.0",
      capabilities: ["capability1", "capability2"],
      metadata: { /* agent-specific config */ },
    };
    super(config);
  }

  async execute(request: AgentRequest, context: AgentExecutionContext): Promise<AgentResponse> {
    // Implementation logic
  }

  async healthCheck(): Promise<boolean> {
    // Health check logic
  }
}

export const createYourAgent = (): BaseAgent => new YourAgentClass();
```

#### Step 2: Register Agent in Main Index
Update `src/index.ts`:
1. Import the factory function
2. Register in `initializeAgents()` function
3. Create default instance

#### Step 3: Reusable Utilities
- Use `src/utils/gemini-util.ts` for Gemini AI interactions
- Create shared utilities in `src/utils/` for common functionality
- Follow singleton pattern for stateless utilities

### Key Patterns
- **Payload Handling**: Agents receive payload as string (like web scraper)
- **Error Handling**: Always return structured AgentResponse with success/error
- **Metadata**: Include processing time, content length, request IDs
- **Health Checks**: Implement meaningful health checks for external dependencies
- **Factory Pattern**: Export factory function for registry registration

### SEO Optimization Agent Example
- Created `seo-optimization-agent.ts` following the pattern
- Uses `geminiUtil` for AI-powered SEO analysis
- Takes same payload format as web scraper (string input)
- Provides comprehensive SEO recommendations with structured output

### GitHub Agent Example
- Created `github-agent.ts` following the pattern
- **Simplified to SEO-only agent**: Takes string payload containing SEO context with embedded GitHub repo URL
- **Payload Format**: String input (no JSON parsing) containing SEO context and repository URL
- **Core Functionality**:
  - Extracts repository URL from context using regex patterns
  - Uses Gemini AI to generate complete SEO-optimized HTML from context
  - Creates unique branch names with format: `director-ai-{UUID}`
  - Commits optimized HTML to new branch and creates PR
  - Returns simple "Action completed check on github" message
- **Repository URL Detection**: Supports both `github.com/owner/repo` and direct `owner/repo` patterns
- **AI-Powered HTML Generation**: Creates complete HTML5 documents with comprehensive SEO elements
- Uses Octokit for GitHub API interactions and Gemini for AI-powered HTML generation

### Dependencies
- `@google/genai` for Gemini AI integration
- `@octokit/rest` for GitHub API operations
- `dotenv` for environment variable management
- Ensure GOOGLE_API_KEY and GITHUB_TOKEN are configured in environment

# Scratchpad

## Current Task: Agent Orchestrator Service Implementation

### Task Description
Building an agent orchestrator server with the following requirements:
- Add a service called "agent-orderer" that determines the optimal execution order of AI agents for a given prompt
- Use Gemini API to analyze prompts and select/order agents based on their specializations
- Store agent data in Redis (Upstash) with keys like AGENT_<id>
- Calculate costs based on input length * 10 * agent's costPerOutputToken
- Return structured quote with agent order, costs, and metadata
- Clear out current execute route code for future implementation

### Task Progress
[X] Create agent-orderer.service.js with Gemini integration
[X] Create setup-agents.js script to populate Redis with 4 hardcoded agents
[X] Update .cursorrules file with task documentation
[X] Test the quote endpoint with the new service
[X] Run agent setup script to populate Redis
[X] Verify integration works end-to-end
[X] Clean out execute route code as requested
[X] Fix Redis configuration and JSON parsing issues
[X] Create comprehensive test script for endpoint verification

### Implementation Details

#### Agent Data Structure
```javascript
{
  id: uuid,
  name: "Agent Name",
  description: "Agent specialization description",
  address: "0x...", // Ethereum address
  costPerOutputToken: 0.000001 // Cost in dollars
}
```

#### 4 Core Agents
1. Web Scraper Agent (0x34D5a31c1b74ff7d2682743708a5C6Ac3CB30627) - Website data scraping
2. Data Analyzer Agent (0x53185299C535286c57e2338e35ebd8A56C9Ab2Dd) - Data analysis and extraction
3. SEO Optimization Agent (0x2f7D95566BfAF09Ee5CA41765486181bdC827583) - SEO suggestions
4. GitHub Code Agent (0xBe53bed7B566b5c5a11361664cf9eaE5bB18Ed9a) - Code writing and repository management

#### Cost Calculation
Cost per agent = input.length * 10 * agent.costPerOutputToken

#### API Flow
1. POST /api/jobs/quote with { prompt: "..." }
2. AgentSequencerService.getAgentSequence() calls Gemini with agent list
3. Gemini returns array of { agentAddress, agentPrompt }
4. Service calculates costs and returns structured quote
5. Returns { jobId, agentSequence, totalCost, metadata }

#### AgentSequence Structure
Each item in the agentSequence array contains:
```javascript
{
  agentAddress: "0x...", // Ethereum address of the agent
  agentPrompt: "specific task description", // Actionable instruction for the agent
  cost: 0.000045, // Calculated execution cost
  agentName: "agent_name", // Human-readable agent name
  agentId: "uuid-string", // Unique identifier
  valid: true // Whether agent reference is valid
}
```

### Files Created/Modified
- ✅ backend/src/services/agent-orderer.service.js - Core service with Gemini integration
- ✅ backend/scripts/setup-agents.js - Redis population script
- ✅ .cursorrules - Updated with task documentation

### Next Steps
[X] Test the quote endpoint functionality
[X] Run setup script to populate Redis
[X] Verify end-to-end integration
[X] Document usage patterns and error handling
[X] Create agent executor utility for individual agent execution
[X] Implement dummy responses for all agent types
[X] Integrate agent executor with execute endpoint
[X] Create comprehensive test scripts

### Current Status: READY FOR TESTING
The agent orchestrator system is now complete with:
- Quote generation via AgentSequencerService
- Agent execution via AgentExecutorService
- Full execute endpoint implementation
- Comprehensive test utilities

### Think like a senior software engineer
- Clean separation of concerns (service layer, data access)
- Proper error handling and logging throughout
- Validation of inputs and API responses
- Cost calculation abstracted into reusable method
- Configuration via environment variables
- Comprehensive debugging output for troubleshooting
